# -*- coding: utf-8 -*-
"""
Created on Wed Feb 01 10:53:33 2017

@author: Brandon Hong
The purpose of this program is to interface with the OMRON V68OS-HMD63 RF Read/Write Module. The library is coded for reading
and writing to specifically 256 bytes of data. The primary functionality of this library is to read, write, and verify the 
contents of the RFID tags against the original xml-files containing 256 numbers ranging from 0 to 255. 
"""
import socket
from time import sleep
import xml.etree.ElementTree as et
from textwrap import wrap

addr = ('192.168.178.2', 502)

errLibrary = {'01': 'Illegal function', '02': 'Illegal data address',
              '03': 'Illegal data value', '04': 'Failure in slave device',
              '06': 'Slave device busy'}

def setTCP_IP(curr_addr, addr, subnet, gateway):
    '''Sets IP address, subnet, and gateway. Write in format 'xxxxxxxxxxxx' to represent xxx.xxx.xxx.xxx
    curr_addr is in the format of ('xxx.xxx.xxx.xxx', xxx) similar to addr
    
    Example: setTCP_IP(('192.168.178.2', 502), 123456789002, 123456789001, 123456789001)
    
    Returns: '\x00\x00\x00\x00\x00\x06\xff\x10\xb8\x00\x00\x06'
    '''
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1) #1 second timeout period to connect to device
    sock.connect(curr_addr)
    end = ''
    try:
        for i in [addr, subnet, gateway]:
            for j in wrap(i, 3):
                end += hex(int(j))[2:].zfill(2).decode('hex')
    except AttributeError:
        print 'Please write in string format'
    except Exception as exception:
        print exception
    query = strToHex('000000000013FF10B80000060C') + end
    sock.sendall(query)
    data = sock.recv(1024)
    print repr(data)
    sock.close()
    
def errLib(code):
    '''Returns definition of the error code
    
    Example: errLib('01')
    
    Returns: 'Illegal function'
    '''
    global errLibrary
    return errLibrary.get(code)

def strToHex(string):
    '''Converts a string to hex format for sending. Must be string
    
    Example: strToHex('ffff')
    
    Returns: '\xff\xff'
    '''
    newS = string.decode('hex')
    return newS

def hexToStr(string):
    '''Converts received data to a more readable format
    
    Example: hexToStr('\xff\xff')
    
    Returns: 'ffff'
    '''
    newS = string.encode('hex')
    return newS
    
def xmlRead(filename):
    '''Reads the values of the all value subelements
    
    Example: xmlRead('C:\Users\RapidsSolutionsCanad\Desktop\example.xml')
    
    Returns: ('\x00\x00\x00\x00\x00\x00', '\x00\x00\x00\x00\x00\x00') 
    '''
    query = ''#with \x prefix
#    query2 = '' #without \x prefix
    tree = et.parse(filename)
    root = tree.getroot()
    for variable in root.findall('variable'):
        value = variable.find('value').text
        value = map(int, value.split(' '))
        for vals in value:
            query += hex(vals)[2:].zfill(2).decode('hex')
#            query2 += hex(vals)[2:].zfill(2)
        
    first = query[:len(query)/2]
    second = query[len(query)/2:]
    return first, second

def stop(sock):
    '''Terminates the RFID read/write operation
    
    Example: stop(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
    
    Returns: (True, '\x00\x00\x00\x00\x00\x06\xff\x10\xd1\x00\x00\x01')
    '''
    try:
        sock.settimeout(.5)
        sock.sendall(strToHex('000000000009ff10D1000001020000'))
        return True, sock.recv(1024)
    except Exception:
        return False, sock.recv(1024)

def readRequest():
    '''Requests to read RFID tag. Waits for the Reader to read RFID tag and listens to response
    
    Example: readRequest()
    
    Returns: (True, 'ffffffffff...')
    
    Example: readRequest()
    
    Returns: (False, 'Not connected to RF device. Check connection')
    '''
    try: 
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1) #1 second timeout period to connect to device
        sock.connect(addr)
        reg_addr = hex(0)[2:].zfill(4).decode('hex')
        word_count = hex(64)[2:].zfill(4).decode('hex')
        received = ''
        for i in range(2):
            query = strToHex('000000000006FF03') + reg_addr + word_count
            sock.settimeout(2) #2 second timeout period for RFID tag pickup and query
            sock.sendall(query)
            data = sock.recv(1024)
            if data[7] == '83'.decode('hex'):
                stop(sock)
                sock.close()
#                print repr(data)
                return False, ('Error occurred. {}: Code {}'.format(data[8].encode('hex'), errLib(data[8].encode('hex'))))
            received += data[9:]
            reg_addr = word_count
#            print repr(data).decode('hex')
            sleep(.5) 
        sock.close()
        return True, received.encode('hex')
    except Exception:
#        print exception, ': ' + 'readRequest() did not work'
        stopped = stop(sock)
        sock.close()
        if stopped:
            return False, received.encode('hex')
        else:
            return False, "Not connected to RF device. Check connection"

def writeRequest(filename):
    '''Requests to write to RFID tag. Waits for the Reader to pick up tag then writes to it
    
    Example: writeRequest('C:\Users\RapidsSolutionsCanad\Desktop\example.xml')
    
    Returns: (True, '000000000006ff1000000040000000000006ff1000400040')
    
    Example: writeRequest('C:\Users\RapidsSolutionsCanad\Desktop\example.xml')
    
    Returns: (False, 'Error occurred. 04: Code Failure in slave device')
    '''
    try:
        xml = xmlRead(filename)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1) #1 second timeout period to connect to device
        sock.connect(addr)
        reg_addr = hex(0)[2:].zfill(4).decode('hex')
        word_count = hex(64)[2:].zfill(4).decode('hex')
        byte_count = hex(128)[2:].zfill(2).decode('hex')
        received = ''
        for i in xml:
            query = strToHex('000000000087FF10') + reg_addr + word_count + byte_count + i
            sock.settimeout(2) #2 second timeout period for FR tag pickup and query
            sock.sendall(query)
            data = sock.recv(1024)
            if data[7] == '90'.decode('hex'):
                stop(sock)
                sock.close()
#                print repr(data)
                return False, ('Error occurred. {}: Code {}'.format(data[8].encode('hex'), errLib(data[8].encode('hex'))))
#            print data.encode('hex')
            received += data
            reg_addr = word_count
            sleep(.5)
        sock.close()
        return True, received.encode('hex')
    except Exception:
#        print exception, ': ' + 'writeRequest() did not work'
        stopped = stop(sock)
        sock.close()
        if stopped:
            return False, received.encode('hex')
        else:
            return False, "Not connected to RF device. Check connection"

def verifyWrite(filename):
    '''Verifies the contents of the RFID tag is the same as the original xml file

    Example: verifyWrite('C:\Users\RapidsSolutionsCanad\Desktop\works.xml')
    
    Returns: (True, 'ffffffffff...')
    '''
    xml = ''.join(xmlRead(filename)).encode('hex')
    received = readRequest()[1]
    return (received == ''.join(xml)), received

def makeRFNum(string):
    '''Returns decimal representation of hex string similar to representation in xml file

    Example: makeRFNum('ffffffffffffffffffff...ffffffffffff')
    
    Output: 255 255 255 255 255 255 255 255 255 255      0
             .
             .
             .
             255 255 255 255 255 255      250
    '''
    num = ''
    count = 0
    for i in string:
        if len(num) != 20:
            num += i
        else:
            num = ' '.join(str(int(a+b, 16)) for a,b in zip(num[::2], num[1::2]))
            print num, '\t', count
            num = i
            count += 10
    num = ' '.join(str(int(a+b, 16)) for a,b in zip(num[::2], num[1::2]))
    print num, '\t', count
    
def lock():
    '''Locks the RFID tag write feature and cannot be undone
    
    Example: lock()
    
    Returns: (True, '000000000006ff10a2000002')
    
    Example: lock()
    
    Returns: lock(False, '')
    '''
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1) #1 second timeout period to connect to device
        sock.connect(addr)
        received = ''
        query = strToHex('00000000000BFF10A20000020400000001')
        sock.settimeout(2) #2 second timeout period for FR tag pickup and query
        sock.sendall(query)
        data = sock.recv(1024)
        if data[7] == '90'.decode('hex'):
            stop(sock)
            sock.close()
            return False, ('Error occurred. {}: Code {}'.format(data[8].encode('hex'), errLib(data[8].encode('hex'))))
#            print data.encode('hex')
        received += data
        sock.close()
        return True, received.encode('hex')
    except Exception:
#        print exception, ': ' + 'lock() did not work'
        stopped = stop(sock)
        sock.close()
        if stopped:
            return False, received.encode('hex')
        else:
            return False, "Not connected to RF device. Check connection"
