# -*- coding: utf-8 -*-
"""
Created on Wed Feb 01 10:53:33 2017

@author: Brandon Hong
The purpose of this program is to interface with the OMRON V68OS-HMD63 RF tag Reader/Writer. 
"""
import socket
from time import sleep
import xml.etree.ElementTree as et
from textwrap import wrap

addr = ('192.168.178.2', 502)

errLibrary = {'01': 'Illegal function', '02': 'Illegal data address',
              '03': 'Illegal data value', '04': 'Failure in slave device',
              '06': 'Slave device busy'}

def setTCP_IP(curr_addr, addr, subnet, gateway):
    '''Sets IP address, subnet, and gateway. Write in format 'xxxxxxxxxxxx' to represent xxx.xxx.xxx.xxx
    curr_addr is in the format of ('xxx.xxx.xxx.xxx', xxx) similar to addr'''
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect(curr_addr)
    end = ''
    try:
        for i in [addr, subnet, gateway]:
            for j in wrap(i, 3):
                end += hex(int(j))[2:].zfill(2).decode('hex')
    except AttributeError:
        print 'Please write in string format'
    query = strToHex('000000000013FF10B80000060C') + end
    sock.sendall(query)
    data = sock.recv(1024)
    print repr(data)
    sock.close()
    
def errLib(code):
    '''Returns definition of the error code'''
    global errLibrary
    return errLibrary.get(code)

def strToHex(string):
    '''Converts a string to hex format for sending. Must be string'''
    newS = string.decode('hex')
    return newS

def hexToStr(string):
    '''Converts received data to a more readable format'''
    newS = string.encode('hex')
    return newS
    
def xmlRead(filename):
    '''Reads the values of the all value subelements'''
    query = ''#with \x prefix
#    query2 = '' #without \x prefix
    tree = et.parse(filename)
    root = tree.getroot()
    for variable in root.findall('variable'):
        value = variable.find('value').text
        value = map(int, value.split(' '))
        for vals in value:
            query += hex(vals)[2:].zfill(2).decode('hex')
#            query2 += hex(vals)[2:].zfill(2)
    
    first = query[:len(query)/2]
    second = query[len(query)/2:]
    return first, second    

def stop(sock):
    '''Terminates the RF read/write operation'''
    if sock in locals():
        sock.sendall(strToHex('000000000009ff10D1000001020000'))
        return True
    else:
        return False

def readRequest():
    '''Requests to read RF tag. Waits for the Reader to read RF tag and listens to response'''
    try: 
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        sock.connect(addr)
        reg_addr = hex(0)[2:].zfill(4).decode('hex')
        word_count = hex(64)[2:].zfill(4).decode('hex')
        received = ''
        for i in range(2):
            query = strToHex('000000000006FF03') + reg_addr + word_count
            sock.settimeout(5) #5 second timeout period for RF tag pickup and query
            sock.sendall(query)
            data = sock.recv(1024)
            if data[7] == '83'.decode('hex'):
                sock.close()
                return False, ('Error occurred. {}: Code {}'.format(data[8].encode('hex'), errLib(data[8].encode('hex'))))
            received += data[9:]
            reg_addr = word_count
            sleep(.5) 
        sock.close()
        return True, received.encode('hex')
    except Exception as exception:
#        print exception, ': ' + 'readRequest() did not work'
        stopped = stop(sock)
        sock.close()
        if stopped:
            return False, received.encode('hex')
        else:
            return False, "Not connected to RF device. Check connection"

def writeRequest(filename):
    '''Requests to write to RF tag. Waits for the Reader to pick up tag then writes to it'''
    try:
        xml = xmlRead(filename)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        sock.connect(addr)
        reg_addr = hex(0)[2:].zfill(4).decode('hex')
        word_count = hex(64)[2:].zfill(4).decode('hex')
        byte_count = hex(128)[2:].zfill(2).decode('hex')
        received = ''
        for i in xml:
            query = strToHex('000000000087FF10') + reg_addr + word_count + byte_count + i
            sock.settimeout(5) #5 second timeout period for FR tag pickup and query
            sock.sendall(query)
            data = sock.recv(1024)
            if data[7] == '90'.decode('hex'):
                sock.close()
                return False, ('Error occurred. {}: Code {}'.format(data[8].encode('hex'), errLib(data[8].encode('hex'))))
#            print data.encode('hex')
            received += data
            reg_addr = word_count
            sleep(.5)
        sock.close()
        return True, received.encode('hex')
    except Exception as exception:
#        print exception, ': ' + 'writeRequest() did not work'
        stopped = stop(sock)
        sock.close()
        if stopped:
            return False, received.encode('hex')
        else:
            return False, "Not connected to RF device. Check connection"

def verifyWrite(filename):
    '''Verifies the contents of the RF tag is the same as the original xml file'''
    xml = ''.join(xmlRead(filename)).encode('hex')
    received = readRequest()[1]
    return (received == ''.join(xml)), received
